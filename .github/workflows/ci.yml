name: a1to5x

on:
  workflow_dispatch:
     inputs:
       mode:
         description: 'Download mode(aria2c,curl,axel,wget)'
         required: true
         default: 'aria2c'
       output:
         description: 'Output(wget=O)'
         required: true
         default: 'o'
       filename:
         description: 'ROM NAME'
         required: true
         default: 'xx.zip'
       filelink:
         description: 'ROM LINK'
         required: true
       release:
         description: 'Upload to Release'
         required: true
         default: 'true'

jobs:
  a1to5x:
    runs-on: ubuntu-18.04
    continue-on-error: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialization environment
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install git openjdk-8-jdk wget curl rsync aria2 python python3 unzip device-tree-compiler brotli simg2img img2simg axel cpio
          pip3 install protobuf
          pip install brotli

      - id: var
        name: Download
        run: |
          echo "Download"
          NAME="${{ github.event.inputs.filename }}"
          if [[ ! -z "$(echo ${NAME} | grep ".zip")" ]]; then
              echo "::set-output name=filename::${NAME%.*}"
              filename="${NAME%.*}"
          fi
          ${{ github.event.inputs.mode }} ${{ github.event.inputs.filelink }} -${{ github.event.inputs.output }} "${filename}.zip"
          ls -al

      - name: Payload Extracting
        run: |
          echo "Payload Extracting"
          unzip ${{ steps.var.outputs.filename }}.zip
          rm -rf ${{ steps.var.outputs.filename }}.zip
          if [[ -f "payload.bin" ]]; then
              python3 update-payload-extractor/extract.py payload.bin --output_dir ./output/
          fi
          mv *.img output/
          ls -al output/

      - name: Fstab Patching
        run: |
          if [[ -f "output/vendor.img" ]]; then
              echo "vendor"
              mkdir vendor/
              sudo mount output/vendor.img vendor/
              cat vendor/etc/fstab.qcom
              fstab="vendor/etc/fstab.qcom"
              sudo sed -i 's/,slotselect//g' $fstab
              sudo sed -i 's/,verify//g' $fstab
              sudo sed -i 's/forceencrypt/encryptable/g' $fstab
              sudo sed -i 's/fileencryption=ice/encryptable=footer/g' $fstab
              sudo cp vendor/etc/fstab.qcom output/fstab.qcom
              sudo umount vendor
              sudo rm -rf vendor
          else
              echo "system"
              mkdir system/
              sudo mount output/system.img system/
              cat system/system/vendor/etc/fstab.qcom
              fstab="system/system/vendor/etc/fstab.qcom"
              sudo sed -i 's/,slotselect//g' $fstab
              sudo sed -i 's/,verify//g' $fstab
              sudo sed -i 's/forceencrypt/encryptable/g' $fstab
              sudo sed -i 's/fileencryption=ice/encryptable=footer/g' $fstab
              sudo cp system/system/vendor/etc/fstab.qcom output/fstab.qcom
              sudo umount system
              sudo rm -rf system
          fi

      - name: img_info && dtb Patching
        run: |
          echo "mkboot"
          mv output/boot.img mkbootimg/
          cd mkbootimg
          ./mkboot boot.img boot
          rm boot.img
          cd boot
          sed -i 's/veritykeyid=id:\w*//g' img_info
          cp img_info ../../output/
          ls -R
          cd ../../
          mv mkbootimg/boot/kernel image.gz-dtb
          ./split-appended-dtb image.gz-dtb
          ls
          rm image.gz-dtb
          for i in `find *.dtb`; do
              dts=${i%.*}.dts
              dtc -q -I dtb -O dts -o $dts $i
              rm -rf $i
              if [ `grep -c "vbmeta" $dts` -ne '0' ];then
                  echo $dts
                  line="$(grep -n "fstab" $dts)"
                  linea="$(echo $line | cut -d ":" -f 1)"
                  lineb="`expr $linea + 24`""p"
                  sed -n "$linea,$lineb" $dts
                  sed -i '/parts/{n;d;}' $dts
                  sed -i '/vbmeta/d' $dts
                  sed -i '/android,system/{n;d;}' $dts
                  sed -i '/android,system/{n;d;}' $dts
                  sed -i '/android,system/{n;d;}' $dts
                  sed -i '/android,system/d' $dts
                  sed -i '/,discard/{n;s/,slotselect//;}' *.dts
                  sed -i 'N;/\n.*,slotselect/!P;D' $dts
                  sed -i '/,slotselect/{n;d;}' $dts
                  sed -i '/,slotselect/{n;d;}' $dts
                  sed -i '/,slotselect/d' $dts
                  sed -i '/,fstab/r flags.txt' $dts
                  sed -i '/,fstab/G' $dts
                  sed -i '/android,firmware/{n;d;}' $dts
                  sed -i 's/,avb//g' $dts
                  sed -i '/,slotselect/{n;s/disable/ok/;}' $dts
                  sed -i 's/,slotselect//g' $dts
                  if [[ -f "output/vendor.img" ]]; then
                      sed -i '/android,vendor/{n;s/vendor/cust/;}' $dts
                  fi
                  sed -n "$linea,$lineb" $dts
              fi
              cp $dts output/
              dtc -q -I dts -O dtb -o $i $dts
              rm -rf $dts
          done
          cat kernel *.dtb > image.gz-dtb
          ls -al
          mv image.gz-dtb mkbootimg/boot/kernel
          cd mkbootimg
          ./mkboot boot boot.img
          cd ..
          
      - name: MakeMeSAR
        run: |
          mkdir tmp
          mv mkbootimg/boot.img tmp
          cd tmp
          ../magiskboot unpack -h boot.img
          cp ramdisk.cpio ../output/
          cp -f ../ramdisk-sar.cpio ramdisk.cpio
          ../magiskboot repack boot.img
          ls -al
          cd ..
          mv tmp/new-boot.img output/boot.img
          
      - name: Packing
        run: |
          mv output/boot.img template/boot.img
          mv output/system.img template/system.img
          if [[ -f "output/vendor.img" ]]; then
              mv output/vendor.img template/vendor.img
          fi
          cd template
          ls -al
          cd ..
          echo "--------------------------------------------"
          mv template ${{ steps.var.outputs.filename }}
          cd ${{ steps.var.outputs.filename }}
          zip -q -r -9 ${{ steps.var.outputs.filename }}.zip *
          cd ..
          mv ${{ steps.var.outputs.filename }}/${{ steps.var.outputs.filename }}.zip ./
          ls -al

      - name: Upload to Artifact
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: |
            output
          retention-days: 7

      - name: Upload to Release
        if: github.event.inputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.var.outputs.filename }}.zip
          name: ${{ steps.var.outputs.filename }}
          tag_name: ${{ github.run_id }}
          body: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE }}
          
      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 10
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE }}
